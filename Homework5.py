"""
1. Оформите решение задач из прошлых домашних работ в функции.
Напишите функцию runner. (все станет проще когда мы изучим модули, getattr и setattr)
a. runner() – все фукнции вызываются по очереди
"""
import Homework4
def runner():
 for func in dir(Homework4):
  item = getattr(Homework4, func)
  if callable(item):
   item()

if __name__ == '__main__':
    runner()

"""
b. runner(‘func_name’) – вызывается только функцию func_name.
"""
def runner1(func_name):
 func_name()

"""
c. runner(‘func’, ‘func1’...) - вызывает все переданные функции
"""
def runner2(*args):
 for item in args:
  if callable(item):
   item()

"""
2. Создайте декоратор, который хранит результаты вызовы функции (за все время вызовов, не только текущий запуск программы)
"""
result = []
def my_dec(func):
 def wrapper(*args, **kwargs):
  global result
  result.append(func)
  new_func = func(*args, **kwargs)
  return new_func
 return wrapper

"""
3. Реализовать функцию get_ranges которая получает на вход непустой список неповторяющихся целых чисел, отсортированных
по возрастанию, которая этот список “сворачивает”
"""
def get_ranges(lst):


 get_ranges([0, 1, 2, 3, 4, 7, 8, 10]) // "0-4,7-8,10"
 get_ranges([4,7,10]) // "4,7,10"
 get_ranges([2, 3, 8, 9]) // "2-3,8-9"

"""
4. В файле хранятся данные с сайта IMDB. Скопированные данные хранятся в файле ./data5/ ratings.list.
Откройте и прочитайте файл(если его нет необходимо вывести ошибку).
Найдите ТОП250 фильмов и извлеките заголовки.
Программа создает 3 файла  top250_movies.txt – названия файлов, ratings.txt – гистограмма рейтингов, years.txt –
гистограмма годов.
"""

"""
Бинарные операции:
5. Написать программу которая находит ближайшую степень двойки к введенному числу. 10(8), 20(16), 1(1), 13(16)
"""

"""
6. Вводится число найти его максимальный делитель, являющийся степенью двойки. 10(2) 16(16), 12(4).
"""
